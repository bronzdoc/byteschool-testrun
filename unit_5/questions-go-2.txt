Q: The names of Go source files must end with ___.

A:

.go
===========

Q: A package statement at the top of a source file specifies the name of the package to which this source file belongs.
An import statement specifies a package to import not by its name but rather its _________.

A:

repo path
===========

Q: Aside from the .go file extension, the name of a Go source file does not matter. True/false?
The source files of a package must be placed in the same directory. True/false?

A:
True
False
===========

Q: If my Go working directory is /home/brian/go, where would I place the source files for a package with import path apple/banana/orange?

A:
/home/brian/go/src/apple/banana/orange
===========

Q: Program execution starts by calling the function ____ in the package also called ____.

A:

main
===========

Q: What's wrong with this code?

	package main

	import "fmt"

	var y
	var x = 3
	if (x < 5) {
		y = 7
	}

	func main() {
		fmt.Println(y)
	}

A:

y is being declared without a type
===========

Q: Why does this code trigger a runtime error? How could we fix this?

	var a []string
	a[0] = "hi"

A:
We need to use make to properly create the slice

var a []string
a = make([]string, 2, 5)
a[0] = "hi"
============

Q: Why does this trigger an error?

	a := make(string[], 3, 5)
	a[4] = "hi"

A:
We are trying to access an index out of bounds
============

Q: What is the value of x after this code?

	a := make(string[], 3, 5)
	b := a
	b = append("hi", "yo")
	x := b[4]

A:

"yo"
============

Q: Why does this trigger an error?

A:
//this is wrong
a := make(string[], 3, 5)
	b := a
	b = append("hi", "yo")
	x := b[4]

// it should be
a := make([]string, 3, 5)
	b := a
	b = append(a, "hi", "yo")
	x := b[4]
===========

Q: Write a function 'sum' that takes any number of ints as arguments and returns their sum (as an int). (Do not worry about overflow.)

A:

func sum(nums ...int) int {
    sum := 0
    for i := 0; i < len(nums); i +=1 {
        sum += nums[i]
    }
    return sum
}
============

Q: What is the value of x after this code?

	a := make([]int, 3, 5)
	b := append(a, 1, 2, 3)
	b[0] = 64
	x := a[0]

A:

0
============

Q: In a separate file 'test.go', write a program that prints the first ten prime numbers, starting from 2.

You will need Println of the "fmt" package to print out the numbers.

Test the program with:

	$ go run test.go

(assuming test.go is in the current working directory of the shell; otherwise you should specify the source file by its absolute path)

A:
test.go
