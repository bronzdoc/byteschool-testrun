Q: What is wrong with this code?

	var foo = "hello"
	foo = 48

A:
foo was assigned and initialized to a string, can't assign a int

============

Q: What is wrong with this code?

	var foo = -87
	var foo = 48

A:
Can't re declare variable with the same name(in the same scope)

============

Q: Rewrite these declarations using := where allowed (and without changing the code):

	var a string
	var b string = "hello"
	var c int = -22
	var d uint64 = 9
	var e = "yo"
	var f = b

A:
    var a string
	b := "hello"
	c := -22
	var d uint64 = 9
	e := "yo"
	f := b
============

Q: What are the values of these two variables?

	var a string
	var b uint16

A:

nil
============

Q: What is wrong with this code?

	package main

	import "fmt"

	func main() {
		x := 3
		if x > 3 {
			y := 2
		} else {
			y := 4
		}
		fmt.Println(y)
	}

A:
"y" it's not visible for "fmt.Println(y)"

============

Q: Add the semi-colons which have been left implicit:

	package main

	import "fmt"

	func main() {
		x := 3
		var y int
		if x > 3 {
			y = 2
		} else {
			y = 4
		}
		fmt.Println(y)
	}

A:
    package main

	import "fmt"

	func main() {
		x := 3;
		var y int;
		if x > 3 {
			y = 2;
		} else {
			y = 4;
		};
		fmt.Println(y);
	};
============

Q: What is the value of x after this code? Why?

	var x int8 = 127
	x += 3            // shorthand for x = x + 3

A:
-126
because x being int8 overflows it's capacity

============

Q: The compiler won't let us add a to b here. Why not? What could we add in the last line to satisfy the compiler?

	a := 5
	var b uint16
	a = a + b

A:
    because a and b are not the same type

	a := 5
	var b uint16
	a = a + int(b)
============

Q: Write a function 'foo' that takes no arguments and returns the int 3 and the string "hi". In function 'main', call 'foo' and assign its return values to variables a and b.

A:
func foo() (int, string) {
    return 3, "hi"
}

func main() {
    a, b := foo()
}

============

Q: Write a function 'foo' that takes a uint32 and an int8 and returns their product as a float32.

A:
func foo(x uint32, z int8) float32 {
        return float32(x + uint32(z))
}

============

Q: Declare an array of 19 strings.

A:
var a [19]string

============

Q: Declare an array of 15 arrays of 7 float32's.

A:
var a [15][7]float32

============

Q: What's wrong with this code?

	a := 3
	var b [a]int

A:
It's redeclaring a

============

Q: Assign "hi" to the last element of this array of arrays:

	var foo [15][7]string

A:
foo[14][6] = "hi"

============

Q: Which of these array elements comes first in memory?

	var foo [11][3][8]bool
	foo[4][1][3] = true
	foo[4][0][7] = true

A:
foo[4][0][7]
============

Q: What is the value of x after this code?

	var a [3]int
	a[0] = 7
	a[1] = 3
	a[2] = 5
	b := a
	x := b[2]

A:

5
============

Q: What is the value of x after this code?

	var a [3]int
	a[0] = 7
	a[1] = 3
	b := a
	x := b[2]

A:
0

=============
